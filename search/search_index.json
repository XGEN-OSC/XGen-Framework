{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"XGen - Framework","text":"<p>XGen - Framework is an open source project providing a framework and basic resources for the HELIX platform. The main goal is a well documented, bug free and easy to adapt framework for developers to build on.</p>"},{"location":"api/core/","title":"Core","text":""},{"location":"api/core/#core","title":"Core","text":"<p>The <code>Core</code> module provides utility functions for player management and module injection in the XGen Framework server.</p>"},{"location":"api/core/#coregetxplayerplayer","title":"Core.getXPlayer(player)","text":"<p>Returns the <code>XPlayer</code> instance associated with the given HELIX player.</p> <p>parameters <code>player</code> - <code>HPlayer</code> The HELIX player object.</p> <p>returns <code>xPlayer</code> - <code>XPlayer</code> The XPlayer instance associated with the player.</p> <p>example</p> <pre><code>local xPlayer = Core.getXPlayer(hPlayer)\n</code></pre>"},{"location":"api/core/#coreinjectname-obj","title":"Core.inject(name, obj)","text":"<p>Injects a given object or value into a module by path.</p> <p>parameters <code>name</code> - <code>string</code> The dot-separated path to the module field to inject into. <code>obj</code> - <code>any</code> The object or value to inject.</p> <p>example</p> <pre><code>Core.inject(\"SomeModule.someFunction\", function() print(\"Hello!\") end)\n</code></pre>"},{"location":"api/dbsc/","title":"DBSC","text":""},{"location":"api/dbsc/#dbsc","title":"DBSC","text":"<p>The <code>DBSC</code> (Database Synchronized Class) class provides a simple way to synchronize classes and objects with the database.</p>"},{"location":"api/dbsc/#dbscmeta","title":"DBSC.Meta","text":"<p>Metadata for a DBSC class.</p> <p>fields <code>name</code> - <code>string</code> The name of the table representing this class in the database. <code>columns</code> - <code>table&lt;</code><code>DBSC.Meta.Column</code><code>&gt;</code> The columns of table in the database.</p>"},{"location":"api/dbsc/#dbscmetacolumn","title":"DBSC.Meta.Column","text":"<p>Column metadata for a DBSC class.</p> <p>fields <code>name</code> - <code>string</code> the name of the column. This is the name of the column in the database and must be the name of the value in the class. <code>type</code> - <code>string</code> the type of the value. This can be a normal database type e.g. VARCHAR or the class name of another <code>DBSC</code> class. <code>primary_key</code> - <code>boolean?</code> if true this column will be registered as primary key. <code>not_null</code> - <code>boolean?</code> if true this column will be registered as not nullable. <code>unique</code> - <code>boolean?</code> if true this column cannot have the same value twice.</p>"},{"location":"api/dbsc/#dbscnewmeta","title":"DBSC:new(meta)","text":"<p>Creates a new class extending the <code>DBSC</code> super class.</p> <p>parameters <code>meta</code> - <code>DBSC.Meta</code> the metadata for the database table.</p> <p>returns <code>class</code> - <code>T</code> the new class extending the <code>DBSC</code> class.</p> <p>example</p> <pre><code>MyClass = DBSC:new({\n    name = \"my_class\",\n    columns = {\n        { name = \"identifier\", type = \"VARCHAR\", primary_key = true }\n    }\n})\n</code></pre>"},{"location":"api/dbsc/#dbscinit","title":"DBSC:init()","text":"<p>Initializes a class extending the DBSC super class. This will create the table in the database (if not exists). This requires the 'self' object to be a DBSC subclass, created with DBSC:new(meta)</p> <p>example</p> <pre><code>-- after class creation and database initialization.\n\nMyClass:init()\n</code></pre>"},{"location":"api/dbsc/#dbscupdate","title":"DBSC:update()","text":"<p>Updates the row in the database with the data of this object.</p> <p>returns <code>success</code> - <code>boolean</code> true if the object was successfully updated in the database, false if something went wrong (e.g. database not initialized, class not initialized, row deleted).</p>"},{"location":"api/dbsc/#dbscgetprimary_keys","title":"DBSC:get(primary_keys)","text":"<p>*Loads an object by its primary keys from the database of this subclass of the DBSC super class. This will save the object in the cache for the given primary keys, so when this function is called *</p> <p>parameters <code>primary_keys</code> - <code>table&lt;string, any&gt;</code> the values of the primary keys to get the object of this class for.</p> <p>returns <code>obj</code> - <code>T?</code> the object for the given primary keys or <code>nil</code> if the object doesn't exist.</p> <p>example</p> <pre><code>local obj = MyClass:get({ identifier = \"my_identifier\" })\n</code></pre>"},{"location":"api/dbsc/#dbscgetwhereconditions","title":"DBSC:getWhere(conditions)","text":"<p>DBSC:get(primary_keys)</p> <p>Loads a list of objects of this class where the given conditions are met. This will NOT put this object in the cache and should therefor be cached manually or when ever possible DBSC:get(primary_keys) be used instead.</p> <p>parameters <code>conditions</code> - <code>table&lt;string, any&gt;</code> the conditions that have to be met in order for the row to be selected. The key must be a valid column of the table in the database and the value must match the type of that column. The conditions are <code>AND</code> connected.</p> <p>returns <code>objects</code> - <code>table&lt;T&gt;</code> The objects that match the given conditions.</p>"},{"location":"api/dbsc/#dbscdelete","title":"DBSC:delete()","text":"<p>Deletes this object from the database and cache.</p> <p>returns <code>success</code> - <code>boolean</code> true if the row was deleted, false otherwise.</p> <p>example</p> <pre><code>-- myObject must be an object of a class extending the DBSC class.\nmyObject:delete()\n</code></pre>"},{"location":"api/layout/","title":"Layout","text":""},{"location":"api/layout/#class","title":"Class","text":"<p>class description here</p> <p>fields <code>my_field</code> - <code>fieldtype</code> field description here. <code>field2</code> - <code>LinkedType</code> description here, dont forget the new line.</p>"},{"location":"api/layout/#classmyfunctionparameter1-parameter2","title":"Class:myFunction(parameter1, parameter2)","text":"<p>function description here.</p> <p>parameters <code>parameter1</code> - <code>type</code> description. <code>parameter2</code> - <code>LinkedType</code> description.  </p> <p>returns <code>valueName</code> - <code>type</code> description.</p> <p>example</p> <pre><code>--- optional example here.\n</code></pre>"},{"location":"api/layout/#classnextfunctionparameter1","title":"Class:nextFunction(parameter1)","text":"<p>...</p>"},{"location":"api/xcharacter/","title":"XCharacter","text":""},{"location":"api/xcharacter/#xcharacter","title":"XCharacter","text":"<p>The <code>XCharacter</code> class represents a single character in the game, bound to a player. It extends the <code>DBSC</code> (Database Synchronized Class) for database support.</p> <p>fields <code>citizen_id</code> - <code>string</code> The unique identifier for the character (primary key). <code>owner</code> - <code>XPlayer</code> The player who owns this character. <code>firstname</code> - <code>string</code> The first name of the character. <code>lastname</code> - <code>string</code> The last name of the character. <code>date_of_birth</code> - <code>string</code> The date of birth of the character in YYYY-MM-DD format. <code>account</code> - <code>XAccount</code> The player's primary banking account. <code>xPlayer</code> - <code>XPlayer</code> The player this character is currently bound to.</p>"},{"location":"api/xcharacter/#xcharacternewowner-firstname-lastname-date_of_birth","title":"XCharacter:new(owner, firstname, lastname, date_of_birth)","text":"<p>Creates a new character instance and inserts it into the database.</p> <p>parameters <code>owner</code> - <code>XPlayer</code> The player who owns this character. <code>firstname</code> - <code>string</code> The first name of the character. <code>lastname</code> - <code>string</code> The last name of the character. <code>date_of_birth</code> - <code>string</code> The date of birth in YYYY-MM-DD format.</p> <p>returns <code>character</code> - <code>XCharacter</code> The new character instance.</p> <p>example</p> <pre><code>local character = XCharacter:new(player, \"John\", \"Doe\", \"1990-01-01\")\n</code></pre>"},{"location":"api/xcharacter/#xcharactergetname","title":"XCharacter:getName()","text":"<p>Returns the character's full name.</p> <p>returns <code>name</code> - <code>string</code> The full name of the character.</p> <p>example</p> <pre><code>local name = character:getName()\nprint(name) -- John Doe\n</code></pre>"},{"location":"api/xplayer/","title":"XPlayer","text":""},{"location":"api/xplayer/#xplayer","title":"XPlayer","text":"<p>The <code>XPlayer</code> class represents a player in the XGen Framework, handling player identification, session tracking, and character management. It extends the <code>DBSC</code> (Database Synchronized Class) for database integration.</p> <p>fields <code>identifier</code> - <code>string</code> The unique identifier of the player (primary key). <code>joined</code> - <code>string</code> The timestamp when the player joined. <code>last_seen</code> - <code>string</code> The timestamp when the player was last seen. <code>current_character</code> - <code>XCharacter?</code> The character this player is currently playing. <code>hPlayer</code> - <code>HPlayer?</code> The connected HELIX player instance.</p>"},{"location":"api/xplayer/#xplayernewidentifier","title":"XPlayer:new(identifier)","text":"<p>Creates a new player instance and inserts it into the database.</p> <p>parameters <code>identifier</code> - <code>string</code> The identifier of the player.</p> <p>returns <code>xPlayer</code> - <code>XPlayer</code> The new player instance.</p> <p>example</p> <pre><code>local player = XPlayer:new(\"steam:110000112345678\")\n</code></pre>"},{"location":"api/xplayer/#xplayerconnected","title":"XPlayer:connected()","text":"<p>Called when a player connects to the server. Updates the last seen timestamp and triggers the join logic.</p>"},{"location":"api/xplayer/#xplayeronjoin","title":"XPlayer:onJoin()","text":"<p>Called when a player joins the server or unloads their current character. Starts character selection.</p>"},{"location":"api/xplayer/#xplayerloadcharactercitizenid","title":"XPlayer:loadCharacter(citizenId)","text":"<p>Sets the character this player is currently playing.</p> <p>parameters <code>citizenId</code> - <code>string</code> The citizen ID of the character to load.</p> <p>returns <code>success</code> - <code>boolean</code> Whether the character was successfully loaded.</p> <p>example</p> <pre><code>player:loadCharacter(\"citizen_1234\")\n</code></pre>"},{"location":"api/xplayer/#xplayerunloadcharacter","title":"XPlayer:unloadCharacter()","text":"<p>Unloads the current character and returns the player to character selection.</p> <p>example</p> <pre><code>player:unloadCharacter()\n</code></pre>"},{"location":"api/xtransaction/","title":"XTransaction","text":""},{"location":"api/xtransaction/#xtransaction-dbsc","title":"XTransaction : DBSC","text":"<p>A transaction represents a money transfer from one account to another. Objects of this class should not be created manually.**</p> <p>fields <code>transaction_id</code> - <code>string</code> the transaction id of this transaction. <code>from_bid</code> - <code>string</code> the id of the account where the money was sent from. <code>to_bid</code> - <code>string</code> the id of the account the money got sent to. <code>amount_major</code> - <code>number</code> the major amount (before the .). <code>amount_minor</code> - <code>number</code> the minor amount (after the .). <code>reason</code> - <code>string</code> the reason the transaction was made. <code>timestamp</code> - <code>TIMESTAMP</code> the date and time the transaction was made.</p>"},{"location":"api/xtransaction/#xtransactiongetprimary_keys","title":"XTransaction:get(primary_keys)","text":"<p>Gets a transaction by its primary keys.</p> <p>parameters <code>primary_keys</code> - <code>{ transaction_id : string }</code> the primary keys (in this case the transaction id).</p>"},{"location":"api/xtransaction/#xtransactiongetwhereconditions","title":"XTransaction:getWhere(conditions)","text":"<p>Gets transactions matching the given conditions.</p> <p>parameters <code>conditions</code> - <code>table</code> the conditions to match.</p>"}]}